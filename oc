 - name: Extract start and end positions for new partition
      set_fact:
        start_position: "{{ free_space.stdout_lines[-1].split()[0] }}"
        end_position: "{{ free_space.stdout_lines[-1].split()[1] }}"

    - name: Debug start and end positions
      debug:
        msg: "Start: {{ start_position }}, End: {{ end_position }}"

    - name: Create a new primary partition using all remaining free space
      shell: "parted /dev/nvme0n1 mkpart primary {{ start_position }}MB {{ end_position }}MB"
      when: start_position | int < end_position | int

    - name: Get the newly created partition name
      shell: lsblk -nrpo NAME,TYPE | awk '$2=="part" && /nvme0n1/ {print $1}' | tail -1
      register: new_partition
      changed_when: false

    - name: Ensure the new partition is correct and not an existing one
      fail:
        msg: "New partition '{{ new_partition.stdout }}' is invalid. Check partition table."
      when: new_partition.stdout in ["/dev/nvme0n1p1", "/dev/nvme0n1p2", "/dev/nvme0n1p3"]

    - name: Check if the new partition has an existing filesystem
      shell: "blkid {{ new_partition.stdout }} || true"
      register: blkid_output
      changed_when: false

    - name: Wipe filesystem signature if needed
      shell: "wipefs -a {{ new_partition.stdout }}"
      when: blkid_output.stdout != ""

    - name: Initialize the new partition as a Physical Volume (PV)
      shell: "pvcreate {{ new_partition.stdout }}"
      when: new_partition.stdout is defined

    - name: Extend Volume Group (VG) rootvg with the new partition
      shell: "vgextend rootvg {{ new_partition.stdout }}"
      when: new_partition.stdout is defined
