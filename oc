# How Garbage Collection and Eviction Threshold Numbers Are Determined in OpenShift

## Memory Thresholds

| Type | Rule | Example for Worker Node (123Gi RAM) |
|:-----|:-----|:------------------------------------|
| `memory.available` (soft) | 2%-4% of total node memory | 2500Mi |
| `memory.available` (hard) | 1%-2% of total node memory | 1500Mi |

**Explanation:**
- Nodes must maintain a buffer of free memory to ensure kubelet, container runtime, and OS services operate smoothly under load.
- Soft threshold provides a grace period before eviction.
- Hard threshold is the critical limit to prevent system-level memory exhaustion and OOM crashes.

---

## Disk Space Thresholds

| Resource | Rule | Example (based on total disk size) |
|:---------|:-----|:-----------------------------------|
| `nodefs.available` (soft) | 12%-15% free | 12% |
| `nodefs.available` (hard) | 7%-8% free | 7% |
| `imagefs.available` (soft) | 18%-20% free | 20% |
| `imagefs.available` (hard) | 10%-12% free | 10% |

**Explanation:**
- Ensures enough free space is available to support container image pulls, log writes, and temporary file operations.
- Soft limits give kubelet time to gracefully evict pods.
- Hard thresholds act as emergency cutoffs to keep the node from crashing.

---

## Inode Thresholds

| Resource | Rule |
|:---------|:-----|
| `nodefs.inodesFree` / `imagefs.inodesFree` (soft) | 5%-10% free inodes |
| `nodefs.inodesFree` / `imagefs.inodesFree` (hard) | 4%-5% free inodes |

**Explanation:**
- Inodes track file metadata — if they run out, the filesystem can no longer create new files, regardless of free disk space.
- Protecting inode availability is critical for Kubernetes object creation and container operations.

---

## Image Garbage Collection Thresholds

| Setting | Meaning |
|:--------|:--------|
| `imageGCHighThresholdPercent: 85` | Trigger GC when container disk usage exceeds 85% |
| `imageGCLowThresholdPercent: 70` | GC continues until disk usage falls to 70% |
| `imageMinimumGCAge: 5m` | Only remove images unused for 5+ minutes |

**Explanation:**
- Maintains usable image layer storage by pruning unused images.
- Reduces risk of full image storage causing image pull failures.
- `imageMinimumGCAge` prevents deletion of images still needed for short-lived jobs.

---

## Why These Numbers?

These thresholds are based on:
- **System safety margins** observed in production OpenShift environments.
- **Red Hat tuning recommendations**.
- Avoiding known node failure conditions like:
  - OOMKilled containers
  - Read-only filesystems from disk exhaustion
  - Scheduling failures due to image pull errors

These thresholds are tuned to balance:
✅ Node stability  
✅ Fast recovery under pressure  
✅ Minimal impact to running workloads

---

## References

- [OpenShift Garbage Collection Tuning Guide](https://docs.openshift.com/container-platform/latest/nodes/nodes-nodes-managing.html#nodes-nodes-containerruntime-container-garbage-collection_nodes-nodes-managing)
- [Kubernetes Node Pressure Eviction Policy](https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/)

