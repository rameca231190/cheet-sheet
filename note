curl -O https://ftp.unicamp.br/pub/centos/8/BaseOS/x86_64/os/Packages/stunnel-5.56-5.el8_3.x86_64.rpm

curl -O https://dl.rockylinux.org/vault/rocky/8.4/BaseOS/x86_64/os/Packages/stunnel-5.56-5.el8_3.x86_64.rpm

openssl s_client -connect 10.52.73.123:8089 -tlsextdebug -msg

export OPENSSL_NO_DEFAULT_ZLIB=1

ldd /usr/bin/<your-binary> | grep zlib



es ‚Äî if Sysdig is flagging this based solely on OpenSSL support for compression (e.g. zlib built into the binary), then it‚Äôs a false positive unless:
	‚Ä¢	TLS sessions are actually negotiated with compression enabled.
	‚Ä¢	Or the application explicitly enables compression in SSL context (which your openssl s_client output shows is not happening).

‚∏ª

üîç What Sysdig Is Likely Doing:

Sysdig scans binaries and linked libraries. It likely found:
	‚Ä¢	libz.so or zlib support linked in OpenSSL (ldd $(which openssl) or strings /usr/lib64/libssl.so | grep -i deflate)
	‚Ä¢	Or saw OpenSSL built with compression support (--with-zlib)

But that doesn‚Äôt mean compression is used ‚Äî it just means it‚Äôs theoretically possible.

‚∏ª

‚úÖ Your Evidence:

From your screenshot:



__

Compression: NONE


This means during actual TLS handshake:
	‚Ä¢	No compression was negotiated
	‚Ä¢	No vulnerability path is exploitable in practice

‚∏ª

üõ° What to Tell Your Security Team

‚ÄúSysdig flagged DEFLATE support likely because OpenSSL has zlib linked, but our TLS sessions do not use compression. This has been validated using openssl s_client ‚Äî the session shows Compression: NONE. We believe this is a false positive.‚Äù

You can optionally add:
	‚Ä¢	OPENSSL_NO_DEFAULT_ZLIB=1 to your container or OpenSSL environment to enforce it even if unused
	‚Ä¢	Harden with OpenSSL built without zlib if you‚Äôre recompiling (not likely on RHCOS)

‚∏ª

Would you like me to generate a formal justification note or attach a sample mitigation memo?
