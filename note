curl -O https://ftp.unicamp.br/pub/centos/8/BaseOS/x86_64/os/Packages/stunnel-5.56-5.el8_3.x86_64.rpm

curl -O https://dl.rockylinux.org/vault/rocky/8.4/BaseOS/x86_64/os/Packages/stunnel-5.56-5.el8_3.x86_64.rpm

openssl s_client -connect 10.52.73.123:8089 -tlsextdebug -msg

export OPENSSL_NO_DEFAULT_ZLIB=1

ldd /usr/bin/<your-binary> | grep zlib



es — if Sysdig is flagging this based solely on OpenSSL support for compression (e.g. zlib built into the binary), then it’s a false positive unless:
	•	TLS sessions are actually negotiated with compression enabled.
	•	Or the application explicitly enables compression in SSL context (which your openssl s_client output shows is not happening).

⸻

🔍 What Sysdig Is Likely Doing:

Sysdig scans binaries and linked libraries. It likely found:
	•	libz.so or zlib support linked in OpenSSL (ldd $(which openssl) or strings /usr/lib64/libssl.so | grep -i deflate)
	•	Or saw OpenSSL built with compression support (--with-zlib)

But that doesn’t mean compression is used — it just means it’s theoretically possible.

⸻

✅ Your Evidence:

From your screenshot:



__

Compression: NONE


This means during actual TLS handshake:
	•	No compression was negotiated
	•	No vulnerability path is exploitable in practice

⸻

🛡 What to Tell Your Security Team

“Sysdig flagged DEFLATE support likely because OpenSSL has zlib linked, but our TLS sessions do not use compression. This has been validated using openssl s_client — the session shows Compression: NONE. We believe this is a false positive.”

You can optionally add:
	•	OPENSSL_NO_DEFAULT_ZLIB=1 to your container or OpenSSL environment to enforce it even if unused
	•	Harden with OpenSSL built without zlib if you’re recompiling (not likely on RHCOS)

⸻

Would you like me to generate a formal justification note or attach a sample mitigation memo?









✅ You’re not vulnerable to active TLS compression leakage.

Here’s what matters from the output:
	•	Line: Compression: NONE
👉 This explicitly confirms that no compression was negotiated.
	•	No compression methods or DEFLATE are mentioned in the ClientHello or ServerHello exchange.
	•	Cipher suite is modern (ECDHE-RSA-AES256-GCM-SHA384), which does not include compression.

⸻

📌 Why is this still showing up in vulnerability scans?

Qualys and similar tools sometimes flag compression vulnerabilities just because the underlying OpenSSL library includes zlib support, even if:
	•	Compression isn’t used.
	•	No service actively enables it.

⸻

🔧 Recommendation (Actionable Summary)


